name: CD

on:
  push:
    tags:
      - "v*.*.*"

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for git tags

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build release artifacts with ProGuard
        run: |
          echo "Building release AAR with ProGuard optimization..."
          ./gradlew :sdk-signin-apple:bundleReleaseAar --init-script gradle/init.gradle.kts --no-configuration-cache --no-daemon --stacktrace

          # Verify ProGuard was applied
          if [ -f "sdk-signin-apple/build/outputs/mapping/release/mapping.txt" ]; then
            echo "✅ ProGuard mapping file found - obfuscation applied successfully"
            ls -la sdk-signin-apple/build/outputs/mapping/release/
          else
            echo "⚠️ ProGuard mapping file not found"
          fi

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: |
            {
              "categories": [
                {
                  "title": "🆕 Features",
                  "labels": [],
                  "rules": [
                    {
                      "pattern": "^feat(\\(.+\\))?:",
                      "on_property": "title"
                    }
                  ]
                },
                {
                  "title": "🐛 Bug Fixes", 
                  "labels": [],
                  "rules": [
                    {
                      "pattern": "^fix(\\(.+\\))?:",
                      "on_property": "title"
                    }
                  ]
                },
                {
                  "title": "📚 Documentation",
                  "labels": [],
                  "rules": [
                    {
                      "pattern": "^docs(\\(.+\\))?:",
                      "on_property": "title"
                    }
                  ]
                },
                {
                  "title": "🔧 Improvements",
                  "labels": [],
                  "rules": [
                    {
                      "pattern": "^(refactor|perf|style)(\\(.+\\))?:",
                      "on_property": "title"
                    }
                  ]
                },
                {
                  "title": "🏗️ Build & CI",
                  "labels": [],
                  "rules": [
                    {
                      "pattern": "^(build|ci)(\\(.+\\))?:",
                      "on_property": "title"
                    }
                  ]
                },
                {
                  "title": "🧪 Testing",
                  "labels": [],
                  "rules": [
                    {
                      "pattern": "^test(\\(.+\\))?:",
                      "on_property": "title"
                    }
                  ]
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
            
            ### 📦 Distribution
            This release is available on JitPack: `com.github.shinhyo:signin-with-apple:${{ steps.get_version.outputs.VERSION }}`

            See the [README](https://github.com/shinhyo/SignInWithApple#getting-started) for installation instructions.

            ### 📄 Assets
            - `sdk-signin-apple-release.aar`: Main library file
          files: |
            sdk-signin-apple/build/outputs/aar/sdk-signin-apple-release.aar
          draft: false
          prerelease: false

      - name: Trigger JitPack build
        run: |
          echo "Triggering JitPack build for version ${{ steps.get_version.outputs.VERSION }}"

          # JitPack build trigger (no API key needed for public repos)
          response=$(curl -s -w "%{http_code}" "https://jitpack.io/com/github/shinhyo/signin-with-apple/${{ steps.get_version.outputs.VERSION }}")
          http_code="${response: -3}"

          if [ "$http_code" -eq 200 ]; then
            echo "✅ JitPack build triggered successfully"
          else
            echo "⚠️ JitPack build trigger response code: $http_code"
            echo "This is normal - JitPack will build on first request"
          fi

          # Also trigger with 'latest' tag
          curl -s "https://jitpack.io/com/github/shinhyo/signin-with-apple/latest" > /dev/null
          echo "Also triggered build for 'latest' tag"

      - name: Summary
        run: |
          echo "## 🎉 Release ${{ steps.get_version.outputs.VERSION }} Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Successfully Published To:" >> $GITHUB_STEP_SUMMARY
          echo "-  **JitPack**: \`com.github.shinhyo:signin-with-apple:${{ steps.get_version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 **GitHub Release**: [v${{ steps.get_version.outputs.VERSION }}](https://github.com/shinhyo/SignInWithApple/releases/tag/v${{ steps.get_version.outputs.VERSION }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📚 Installation:" >> $GITHUB_STEP_SUMMARY
          echo '```gradle' >> $GITHUB_STEP_SUMMARY
          echo 'implementation("com.github.shinhyo:signin-with-apple:${{ steps.get_version.outputs.VERSION }}")' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
