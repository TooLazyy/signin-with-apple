/*
 * Copyright 2025 shinhyo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.github.shinhyo.signinwithapple.sample

import android.os.Bundle
import android.text.method.ScrollingMovementMethod
import androidx.appcompat.app.AppCompatActivity
import io.github.shinhyo.signinwithapple.SignInWithApple
import io.github.shinhyo.signinwithapple.model.AppleSignInResult
import io.github.shinhyo.signinwithapple.sample.databinding.ActivityViewBinding
import io.github.shinhyo.signinwithapple.sample.util.JsonUtil
import io.github.shinhyo.signinwithapple.sample.util.JwtUtil
import kotlinx.serialization.serializer
import timber.log.Timber
import java.util.UUID

class AndroidViewActivity : AppCompatActivity() {
    private lateinit var binding: ActivityViewBinding
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityViewBinding.inflate(layoutInflater)
        setContentView(binding.root)

        binding.tvLog.movementMethod = ScrollingMovementMethod.getInstance()
        binding.btnStartLibrary.setOnClickListener {
            handleAppleSignIn()
        }
    }

    /**
     * Handles Apple Sign-In button click.
     * Generates a secure nonce, starts sign-in, and displays results.
     */
    private fun handleAppleSignIn() {
        // nonce is a cryptographically random value used to prevent replay attacks and to verify the integrity of the authentication response.
        // It must be generated by the client, sent to Apple, and then compared with the value in the id_token payload after authentication.
        // If the nonce in the JWT payload does not match the one you generated, the response should be considered invalid.
        val nonce = UUID.randomUUID().toString()

        SignInWithApple.signIn(this, nonce) { result ->
            result.onSuccess {
                showSuccessResult(it, nonce)
            }.onFailure {
                showFailureResult(it)
            }
        }
    }

    /**
     * Displays the result on success, including nonce check and JWT payload.
     */
    private fun showSuccessResult(credential: AppleSignInResult, nonce: String) {
        val json = JsonUtil.toPrettyJson(credential, serializer<AppleSignInResult>())
        val jwtPretty = JwtUtil.parseJwtPayload(credential.identityToken)
        val jwtPayload = try {
            org.json.JSONObject(jwtPretty)
        } catch (e: Exception) {
            val errorMsg = "onFailure\n\nJWT parse error: ${e.message}"
            Timber.e(errorMsg)
            binding.tvLog.text = errorMsg
            return
        }
        val jwtNonce = jwtPayload.optString("nonce")
        val nonceCheck = if (jwtNonce == nonce) "✅ nonce matches" else "❌ nonce mismatch"
        val message = buildString {
            appendLine("onSuccess")
            appendLine()
            appendLine(json)
            appendLine()
            appendLine("[JWT Payload]")
            appendLine(jwtPretty)
            appendLine()
            appendLine("[Nonce Check]")
            append(nonceCheck)
        }
        Timber.i(message)
        binding.tvLog.text = message
    }

    /**
     * Displays the result on failure.
     */
    private fun showFailureResult(error: Throwable) {
        val jsonMap = JsonUtil.toPrettyJsonMap(mapOf("error" to (error.message ?: "Unknown error")))
        val message = "onFailure\n\n$jsonMap"
        Timber.e(message)
        binding.tvLog.text = message
    }
}